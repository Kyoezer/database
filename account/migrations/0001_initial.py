# Generated by Django 4.0.6 on 2022-07-13 11:52

import account.models
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('date_joined', models.DateTimeField(auto_now_add=True, verbose_name='date_joined')),
                ('is_active', models.BooleanField(default=True, verbose_name='active')),
                ('is_staff', models.BooleanField(default=False, verbose_name='staff')),
                ('is_approved', models.BooleanField(default=False, verbose_name='Is approved')),
                ('is_deny', models.BooleanField(default=False, verbose_name='Is deny')),
                ('is_notapproved', models.BooleanField(default=True, verbose_name='Is notapproved')),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='avatars/')),
                ('is_heriages', models.BooleanField(default=False, verbose_name='Is heriages')),
                ('is_arts', models.BooleanField(default=False, verbose_name='Is arts')),
                ('is_media', models.BooleanField(default=False, verbose_name='Is media')),
                ('is_creation', models.BooleanField(default=False, verbose_name='Is creation')),
                ('is_artscrafts', models.BooleanField(default=False, verbose_name='Is Arts crafts')),
                ('is_fastival', models.BooleanField(default=False, verbose_name='Is fastival')),
                ('is_celebrations', models.BooleanField(default=False, verbose_name='Is celebrations')),
                ('is_historical', models.BooleanField(default=False, verbose_name='Is historical')),
                ('is_museums', models.BooleanField(default=False, verbose_name='Is museums')),
                ('is_libraries', models.BooleanField(default=False, verbose_name='Is libraries')),
                ('is_archives', models.BooleanField(default=False, verbose_name='Is archives')),
                ('is_painting', models.BooleanField(default=False, verbose_name='Is painting')),
                ('is_digital', models.BooleanField(default=False, verbose_name='Is digital')),
                ('is_photography', models.BooleanField(default=False, verbose_name='Is photography')),
                ('is_sculpture', models.BooleanField(default=False, verbose_name='Is sculpture')),
                ('is_pottery', models.BooleanField(default=False, verbose_name='Is pottery')),
                ('is_livemusic', models.BooleanField(default=False, verbose_name='Is live music')),
                ('is_theater', models.BooleanField(default=False, verbose_name='Is theater')),
                ('is_dance', models.BooleanField(default=False, verbose_name='Is dance')),
                ('is_opera', models.BooleanField(default=False, verbose_name='Is opera')),
                ('is_puppetry', models.BooleanField(default=False, verbose_name='Is puppetry')),
                ('is_book', models.BooleanField(default=False, verbose_name='Is book')),
                ('is_magazines', models.BooleanField(default=False, verbose_name='Is magazines')),
                ('is_comics', models.BooleanField(default=False, verbose_name='Is comics')),
                ('is_film', models.BooleanField(default=False, verbose_name='Is film')),
                ('is_television', models.BooleanField(default=False, verbose_name='Is television')),
                ('is_radio', models.BooleanField(default=False, verbose_name='Is radio')),
                ('is_musicvideo', models.BooleanField(default=False, verbose_name='Is music video ')),
                ('is_digitalcontent', models.BooleanField(default=False, verbose_name='Is digital content')),
                ('is_software', models.BooleanField(default=False, verbose_name='Is software')),
                ('is_videogames', models.BooleanField(default=False, verbose_name='Is video games')),
                ('is_animations', models.BooleanField(default=False, verbose_name='Is animations')),
                ('is_fashion', models.BooleanField(default=False, verbose_name='Is fashion')),
                ('is_jewellery', models.BooleanField(default=False, verbose_name='Is jewellery')),
                ('is_toys', models.BooleanField(default=False, verbose_name='Is toys')),
                ('is_interiordesign', models.BooleanField(default=False, verbose_name='Is interior design')),
                ('is_graphics', models.BooleanField(default=False, verbose_name='Is graphics')),
                ('is_architecture', models.BooleanField(default=False, verbose_name='Is architecture')),
                ('is_advertising', models.BooleanField(default=False, verbose_name='Is advertising')),
                ('is_creativerd', models.BooleanField(default=False, verbose_name='Is creative R&D')),
                ('is_creativeeventservices', models.BooleanField(default=False, verbose_name='Is creative event services')),
                ('is_digitalservices', models.BooleanField(default=False, verbose_name='Is creative digital services')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
            managers=[
                ('objects', account.models.UserManager()),
            ],
        ),
    ]
